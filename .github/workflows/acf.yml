name: Run Python script and upload ACF files

on:
  workflow_dispatch:
  repository_dispatch:
    types: [triggered-from-sync-repo]

jobs:
  run-script:
    strategy:
      fail-fast: true
      matrix:
        group: [0, 1, 2, 3]
    runs-on: ubuntu-latest

    steps:
    - name: Check out current repository
      uses: actions/checkout@v2
      
    - name: Check out wxy1343/ManifestAutoUpdate repository
      uses: actions/checkout@v2
      with:
        repository: 'xxTree/ManifestAutoUpdate'
        path: 'other_repo'
        
    - name: Get all numeric branches
      id: get_branches
      run: |
        cd other_repo
        git fetch origin --no-tags --quiet
        branches=($(git ls-remote --heads origin | grep -Eo "refs/heads/[0-9]+$" | grep -Eo "[0-9]+$"))
        group_branches=()
        for i in "${!branches[@]}"; do
          group=$((i % 4))
          if [ $group -eq ${{ matrix.group }} ]; then
            group_branches+=(${branches[i]})
          fi
        done
        echo "::set-output name=branches::$(IFS=,; echo "${group_branches[*]}")"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests vdf PyGithub

    - name: Get all app ids
      id: get_app_ids
      run: |
        import requests
        import json
        url = 'http://your_flask_server:port/get_app_ids' # 更改为你的Flask服务器的地址和端口
        response = requests.get(url)
        app_ids = response.json()
        group_app_ids=[]
        for i in range(len(app_ids)):
          group = i % 4
          if group == ${{ matrix.group }}:
            group_app_ids.append(app_ids[i])
        print(f"::set-output name=app_ids::{','.join(group_app_ids)}")
      shell: python

    - name: Choose branches
      id: choose_branches
      run: |
        use_app_ids = False  #如果是 'true' 则使用 app_ids，否则使用 branches
        if use_app_ids == True:
          echo "::set-output name=branches::${{ steps.get_app_ids.outputs.app_ids }}"
        else:
          echo "::set-output name=branches::${{ steps.get_branches.outputs.branches }}"
      shell: python

    - name: Create required directories
      run: |
        mkdir -p debug/steamcmd/installed
        mkdir -p debug/steamcmd/downloads

    - name: Download and extract SteamCMD
      run: |
        curl -o debug/steamcmd/downloads/steamcmd_linux.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
        tar -xvf debug/steamcmd/downloads/steamcmd_linux.tar.gz -C debug/steamcmd/installed

    - name: Run Python script
      run: python acf.py
      env:
        KEY: ${{ secrets.TOKEN }}
        BRANCHES: ${{ steps.choose_branches.outputs.branches }}

  trigger-workflow:
    needs: run-script
    runs-on: ubuntu-latest

    steps:
    - name: Trigger second workflow
      run: |
        curl -XPOST -u "XliOK:${{ secrets.AUTO }}" \
        -H "Accept: application/vnd.github.everest-preview+json" \
        https://api.github.com/repos/XliOK/test/dispatches \
        -d '{"event_type": "run_second_workflow"}'
